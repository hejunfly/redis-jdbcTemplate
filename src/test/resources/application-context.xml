<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.0.xsd">

    <context:component-scan base-package="com.hj.u.*" />

    <bean id="env" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>mysql.properties</value>
                <value>redis.properties</value>
                <value>redisTemplate.properties</value>
            </list>
        </property>
    </bean>
    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="#{env['jdbc.driver']}" />
        <property name="jdbcUrl" value="#{env['jdbc.url']}" />
        <property name="username" value="#{env['jdbc.username']}" />
        <property name="password" value="#{env['jdbc.password']}" />
        <property name="maximumPoolSize" value="10" />
        <property name="minimumIdle" value="10" />
        <property name="connectionTestQuery" value="select 1" />
        <property name="dataSourceProperties">
            <props>
                <prop key="cachePrepStmts">true</prop>
                <prop key="prepStmtCacheSize">250</prop>
                <prop key="prepStmtCacheSqlLimit">2048</prop>
                <prop key="useServerPrepStmts">true</prop>
            </props>
        </property>
    </bean>
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="#{env['jdbc.driver']}" />
        <property name="url" value="#{env['jdbc.url']}" />
        <property name="username" value="#{env['jdbc.username']}" />
        <property name="password" value="#{env['jdbc.password']}" />

        <property name="initialSize" value="#{env['dbcp.initialSize']}" />
        <property name="maxActive" value="#{env['dbcp.maxActive']}" />
        <property name="maxWait" value="#{env['dbcp.maxWait']}" />
        <property name="testOnBorrow"
                  value="#{env['jdbc.testSql'] == null ? false : true}" />
        <property name="validationQuery" value="#{env['jdbc.testSql']}" />
        <property name="defaultAutoCommit" value="true" />
        <property name="removeAbandoned" value="true" />
        <property name="removeAbandonedTimeout" value="60" />
        <property name="logAbandoned" value="true" />
    </bean>-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager" />
    <!--redis连接池配置 -->
    <bean id="redisPool" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="#{env['redis.tm.maxIdle']}" />
        <property name="maxTotal" value="#{env['redis.tm.maxActive']}" />
        <property name="maxWaitMillis" value="#{env['redis.tm.maxWait']}" />
        <property name="testOnBorrow" value="#{env['redis.tm.testOnBorrow']}" />
    </bean>
    <!-- redis 连接密码-->
    <bean id="redisPassword" class="org.springframework.data.redis.connection.RedisPassword">
        <constructor-arg name="thePassword" value="#{env['redis.tm.pass']}"/>
    </bean>
    <!--redis 模式配置 -->
    <bean id="redisStandaloneConfiguration" class="org.springframework.data.redis.connection.RedisStandaloneConfiguration">
        <property name="hostName" value="#{env['redis.tm.host']}"/>
        <property name="port" value="#{env['redis.tm.port']}"/>
        <property name="password" ref="redisPassword"/>
        <property name="database" value="#{env['redis.tm.dbIndex']}"/>
    </bean>
    <!-- redis 链接工厂-->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="standaloneConfig" ref="redisStandaloneConfiguration"/>
    </bean>
    <!--手动设置 key  与 value的序列化方式-->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    <!--配置jedis模板-->
    <bean id="jedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory" />
        <property name="keySerializer" ref="keySerializer" />
        <property name="valueSerializer" ref="valueSerializer" />
        <property name="hashKeySerializer" ref="keySerializer" />
        <property name="hashValueSerializer" ref="valueSerializer" />
    </bean>
</beans>
